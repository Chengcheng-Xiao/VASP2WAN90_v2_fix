diff -ruN src/mlwf.F src_1/mlwf.F
--- src/mlwf.F	2017-04-20 17:03:58.000000000 +0800
+++ src_1/mlwf.F	2018-05-13 20:40:53.000000000 +0800
@@ -3,7 +3,7 @@
       MODULE mlwf
       USE prec
       USE pead
- 
+
       ! write the wave functions to UNK files
       LOGICAL, PRIVATE, SAVE :: WRITE_UNK
       ! write the mmn and amn files when WANNIER90 runs in lib mode
@@ -34,7 +34,7 @@
       ! setup and run wannier90 in library mode
       LOGICAL, SAVE :: LWANNIER90_RUN=.FALSE.
 
-      !filename of Wannier projection matrices 
+      !filename of Wannier projection matrices
       CHARACTER(LEN=7),PUBLIC,PARAMETER :: WANPROJFILE='WANPROJ'
       ! write U_nm(k) matrix
       LOGICAL, PUBLIC, SAVE :: LWRITE_WANPROJ
@@ -80,7 +80,7 @@
           real(kind=dp), dimension(num_bands_tot_), intent(out) :: proj_zona_
           integer, dimension(num_bands_tot_), intent(out) :: exclude_bands_
 #ifdef VASP2WANNIER90v2
-          integer, dimension(num_bands_tot_), optional, intent(out) :: proj_s_  
+          integer, dimension(num_bands_tot_), optional, intent(out) :: proj_s_
           real(kind=dp), dimension(3,num_bands_tot_), optional, intent(out) :: proj_s_qaxis_
 #endif
         end subroutine wannier_setup
@@ -121,7 +121,7 @@
       CONTAINS
 
 !******************** SUBROUTINE MLWF_READER ***************************
-!      
+!
 !***********************************************************************
       SUBROUTINE MLWF_READER(IU5,IU6,IU0,LDOWNSAMPLE)
       USE base
@@ -173,14 +173,14 @@
       IF ( LWRITE_WANPROJ .AND. .NOT.LWANNIER90_RUN) THEN
          IF(IU0>=0)WRITE(IU0,*)'LWANNIER90_RUN forced by LWRITE_WANPROJ'
          LWANNIER90_RUN=.TRUE.
-      ENDIF 
-  
+      ENDIF
+
       !WANPROJ needs downsampling
       IF ( LWRITE_WANPROJ .AND. .NOT.LDOWNSAMPLE) THEN
          IF(IU0>=0)WRITE(IU0,*)'LDOWNSAMPLE forced by LWRITE_WANPROJ'
          LDOWNSAMPLE=.TRUE.
-      ENDIF 
-      
+      ENDIF
+
       IF (WANNIER90()) THEN
          ! Switch on the PEAD routines
          CALL PEAD_REQUEST
@@ -254,7 +254,7 @@
       IMPLICIT NONE
       LOGICAL WANNIER90RUN
       WANNIER90RUN=LWANNIER90_RUN
-      END FUNCTION WANNIER90RUN 
+      END FUNCTION WANNIER90RUN
 
       SUBROUTINE WANNIER90_RUN_REQUEST
       IMPLICIT NONE
@@ -263,7 +263,7 @@
       END SUBROUTINE WANNIER90_RUN_REQUEST
 
 !******************** SUBROUTINE MLWF_WANNIER90 ************************
-!      
+!
 !***********************************************************************
       SUBROUTINE MLWF_WANNIER90(&
      & WDES,W,P,CQIJ,T_INFO,LATT_CUR,INFO,IO &
@@ -349,7 +349,7 @@
 
       LOGICAL, ALLOCATABLE :: EXCLUDE_BAND(:)
       LOGICAL LUSE_BLOCH_PHASES
-      
+
       INTEGER, PARAMETER :: LMAX=3
       CHARACTER(LEN=11):: UNKFILE
       CHARACTER(LEN=2) :: SP(2)=(/"up","dn"/)
@@ -422,7 +422,7 @@
       ! A minimal wannier90.win file must exist; it must at least
       ! contain the keyword "num_wann"
       IF (IO%IU6>=0) THEN
-         INQUIRE(FILE=seed_name//'.win',EXIST=LWIN_FOUND)         
+         INQUIRE(FILE=seed_name//'.win',EXIST=LWIN_FOUND)
          IF (LWIN_FOUND) THEN
             OPEN(UNIT=99,FILE=seed_name//'.win',STATUS='OLD')
             CALL RDATAB(.FALSE.,seed_name//'.win',99,'num_wann','=','#',';','I', &
@@ -438,7 +438,7 @@
             OPEN(UNIT=99,FILE=seed_name//'.win',STATUS='REPLACE')
             WRITE(99,'(A,I6,2X,A)') ' num_wann =',WDES%NB_TOT,'! set to NBANDS by VASP'
          ENDIF
-         CLOSE(99) 
+         CLOSE(99)
       ENDIF
 
       ! Initialize everything to zero
@@ -463,7 +463,7 @@
      &                   exclude_bands)
 #endif
       ! Now communicate the output to the other nodes
-      CALLMPI( M_sum_i(WDES%COMM,nntot,1) ) 
+      CALLMPI( M_sum_i(WDES%COMM,nntot,1) )
       CALLMPI( M_sum_i(WDES%COMM,nnlist,num_kpts*num_nnmax) )
       CALLMPI( M_sum_i(WDES%COMM,nncell,3*num_kpts*num_nnmax) )
       CALLMPI( M_sum_i(WDES%COMM,num_bands,1) )
@@ -520,7 +520,7 @@
       ! Here the work starts in earnest
       ! We need to calculate M(m,n,j,i) = < u_m,k_i | u_n,k_j >
       ! where k_i = kpt_latt(:,i), and k_j = kpt_latt(:,nnlist(i,j))+nncell(:,i,j)
-      ! U(m,n,j,i) is then written to the file seed_name.mmn 
+      ! U(m,n,j,i) is then written to the file seed_name.mmn
 
       ALLOCATE(M_matrix(num_bands,num_bands,nntot,num_kpts,WDES%ISPIN))
       ALLOCATE(A_matrix(num_bands,num_wann,num_kpts,WDES%ISPIN))
@@ -537,7 +537,7 @@
          IF (WDES%ISPIN==1) THEN
             OPEN(UNIT=99,FILE=seed_name//'.mmn',STATUS='REPLACE')
          ELSE
-            OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.mmn',STATUS='REPLACE')            
+            OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.mmn',STATUS='REPLACE')
          ENDIF
          WRITE(99,'(A)') 'File generated by VASP: '//INFO%SZNAM1
          WRITE(99,'(3I12)') num_bands,num_kpts,nntot
@@ -579,11 +579,15 @@
 
       ! and we might want to read an existing amn file
       IF (READ_AMN) THEN
-      ! compute NPROJ 
+      ! compute NPROJ
       NPROJ=0
       DO ISPINOR=1,WDES%NRSPINORS
       DO ICNTR=1,num_bands_tot
+#ifdef debug
+         WRITE(*,*) 'proj_l ',proj_l(ICNTR),'proj_m ',proj_m(ICNTR),'proj_radial ',proj_radial(ICNTR),' done.'
+#endif
          IF (proj_l(ICNTR)==0.AND.proj_m(ICNTR)==0.AND.proj_radial(ICNTR)==0) CYCLE
+         IF (WDES%NRSPINORS/=1.AND.mod(ICNTR,2)==0) CYCLE
          NPROJ=NPROJ+1
       ENDDO
       ENDDO
@@ -642,12 +646,16 @@
       ALLOCATE(A(WDES%NB_TOT,(LMAX+1)**2),AP(WDES%NB_TOT,(LMAX+1)**2))
       ALLOCATE(ROTYLM((LMAX+1)**2,(LMAX+1)**2),HYBRID_ORBITAL((LMAX+1)**2))
 
-      NPROJ=0 
+      NPROJ=0
 !     CALL START_TIMING("T1")
       ! runs over all projector sites
       spinor: DO ISPINOR=1,WDES%NRSPINORS
       sites : DO ICNTR=1,num_bands_tot
+#ifdef debug
+         WRITE(*,*) 'proj_l ',proj_l(ICNTR),'proj_m ',proj_m(ICNTR),'proj_radial ',proj_radial(ICNTR),' done.'
+#endif
          IF (proj_l(ICNTR)==0.AND.proj_m(ICNTR)==0.AND.proj_radial(ICNTR)==0) CYCLE sites
+         IF (WDES%NRSPINORS/=1.AND.mod(ICNTR,2)==0) CYCLE sites
          NPROJ=NPROJ+1
          ! setup the Ylm rotation matrix in accordance with proj_z and proj_x
          CALL SETROTYLM(proj_x(:,ICNTR),proj_z(:,ICNTR),LMAX,ROTYLM)
@@ -659,7 +667,7 @@
             ENDDO
          ENDIF
 #endif
-         ! translate between VASP and the orbital definition of wannier90  
+         ! translate between VASP and the orbital definition of wannier90
          CALL WANNIER90_ORBITAL_DEFINITIONS(proj_l(ICNTR),proj_m(ICNTR),HYBRID_ORBITAL)
          ! setup the radial functions (real space)
          CALL SETRGRID(RSTART/proj_zona(ICNTR),REND,H,R)
@@ -685,7 +693,7 @@
                DO NP=1,(LMAX+1)**2
                   AP(M,N)=AP(M,N)+A(M,NP)*ROTYLM(N,NP)
                ENDDO
-            ENDDO   
+            ENDDO
             ENDDO
 #ifdef debug
             IF (IO%IU6>=0) THEN
@@ -743,10 +751,10 @@
             IF (WDES%ISPIN==1) THEN
                OPEN(UNIT=99,FILE=seed_name//'.amn',STATUS='REPLACE')
             ELSE
-               OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.amn',STATUS='REPLACE')            
+               OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.amn',STATUS='REPLACE')
             ENDIF
             WRITE(99,'(A)') 'File generated by VASP: '//INFO%SZNAM1
-            WRITE(99,'(3I12)') num_bands,num_kpts,NPROJ     
+            WRITE(99,'(3I12)') num_bands,num_kpts,NPROJ
             DO NKI=1,num_kpts
             DO N=1,NPROJ
             DO M=1,num_bands
@@ -788,7 +796,7 @@
          IF (WDES%ISPIN==1) THEN
             OPEN(UNIT=99,FILE=seed_name//'.eig',STATUS='REPLACE')
          ELSE
-            OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.eig',STATUS='REPLACE')            
+            OPEN(UNIT=99,FILE=seed_name//'.'//SP(ISP)//'.eig',STATUS='REPLACE')
          ENDIF
       ENDIF
 
@@ -818,34 +826,34 @@
                OPEN(UNIT=99,FILE=UNKFILE,FORM='UNFORMATTED',STATUS='REPLACE')
                WRITE(99) W%WDES%GRID%NGX,W%WDES%GRID%NGY,W%WDES%GRID%NGZ,NKI,num_bands
             ENDIF
-            CALL WRITE_WAVE_FUNCTIONS(W,kpt_latt(:,NKI),ISP,EXCLUDE_BAND,P,LATT_CUR,99)   
+            CALL WRITE_WAVE_FUNCTIONS(W,kpt_latt(:,NKI),ISP,EXCLUDE_BAND,P,LATT_CUR,99)
             IF (IO%IU6>=0) CLOSE(99)
          ENDDO
       ENDIF
 
       ENDDO spin
-   
+
       ! Write information on seed_name.win
       IF (IO%IU6>=0) THEN
          OPEN(UNIT=99,FILE=seed_name//'.win',STATUS='OLD')
-         
+
          IF (spinors) THEN
             CALL OCCURS_IN_FILE(99,'spinors',N)
             IF (N==0) THEN
                WRITE(99,'(/A)') 'spinors = .true.'
             ELSE
                WRITE(*,'(A,/A/)') 'MLWF_WANNIER90: WARNING: '//seed_name//'.win seems to contains', &
-              &                  'the SPINORS tag, I hope it applies to the current setup ...'            
+              &                  'the SPINORS tag, I hope it applies to the current setup ...'
             ENDIF
          ENDIF
-             
+
          CALL OCCURS_IN_FILE(99,'unit_cell_cart',N)
          IF (N==0) THEN
             WRITE(99,'(/A)') 'begin unit_cell_cart'
             WRITE(99,'(3F14.7)') real_lattice(1,:)
             WRITE(99,'(3F14.7)') real_lattice(2,:)
             WRITE(99,'(3F14.7)') real_lattice(3,:)
-            WRITE(99,'(A)')  'end unit_cell_cart'            
+            WRITE(99,'(A)')  'end unit_cell_cart'
          ELSE
             WRITE(*,'(A,/A/)') 'MLWF_WANNIER90: WARNING: '//seed_name//'.win seems to contains', &
            &                  'a UNIT_CELL_CART block already, I hope it applies to the current setup ...'
@@ -862,7 +870,7 @@
                WRITE(99,'(A)')  'end atoms_cart'
             ELSE
                WRITE(*,'(A,/A/)') 'MLWF_WANNIER90: WARNING: '//seed_name//'.win seems to contains', &
-              &                  'a ATOMS_CART block already, I hope it applies to the current setup ...'              
+              &                  'a ATOMS_CART block already, I hope it applies to the current setup ...'
             ENDIF
          ELSE
             WRITE(*,'(A,/A/)') 'MLWF_WANNIER90: WARNING: '//seed_name//'.win seems to contains', &
@@ -951,8 +959,8 @@
          !possibly write UWAN files
          IF (LWRITE_WANPROJ .AND. IO%IU6>=0) THEN
             WRITE(IO%IU0,*)' Writing '//WANPROJFILE//' file'
-            CALL WRITE_WANPROJ_FILE(WDES)                  
-         ENDIF 
+            CALL WRITE_WANPROJ_FILE(WDES)
+         ENDIF
       ENDIF
 
       DEALLOCATE(atom_symbols,atoms_cart)
@@ -974,7 +982,7 @@
 
 
 !******************** SUBROUTINE MLWF_ROTATE_ORBITALS ******************
-! 
+!
 !***********************************************************************
       SUBROUTINE MLWF_ROTATE_ORBITALS( &
      &   WDES,W,KPOINTS,GRID,T_INFO,P,NONL_S,SYMM,LATT_CUR,IO)
@@ -1010,8 +1018,8 @@
          CALL KPAR_SYNC_ALL(WDES,W)
          CALL RE_GEN_LAYOUT( GRID, WDES, KPOINTS, LATT_CUR, LATT_CUR,-1, IO%IU0)
          CALL REALLOCATE_WAVE( W, GRID, WDES, NONL_S, T_INFO, P, LATT_CUR)
-      ENDIF     
-      
+      ENDIF
+
       CALL MLWF_ROTATE_ORBITALS_FULLK(WDES,W)
 
       RETURN
@@ -1019,7 +1027,7 @@
 
 
 !******************** SUBROUTINE MLWF_ROTATE_ORBITALS_FULLK ************
-! 
+!
 !***********************************************************************
       SUBROUTINE MLWF_ROTATE_ORBITALS_FULLK(WDES,W)
       USE dfast
@@ -1035,7 +1043,7 @@
       INTEGER ISP,NK,NKP,NW,NB,NBEXCL,NBwin
       COMPLEX(q) CTMP
       GDEF, ALLOCATABLE :: U(:,:)
- 
+
       CALL CHECK_FULL_KPOINTS
 
       IF ((.NOT.ALLOCATED(U_matrix)).OR.(.NOT.ALLOCATED(U_matrix_opt))) THEN
@@ -1056,7 +1064,7 @@
       ENDDO
       IF ((NB+NBEXCL)/=WDES%NB_TOT) THEN
          WRITE(*,*) 'MLWF_ROTATE_ORBITALS_FULLK: ERROR: inconsistent number of bands:', &
-        &   NB+NBEXCL,WDES%NB_TOT 
+        &   NB+NBEXCL,WDES%NB_TOT
       ENDIF
 
       ALLOCATE(U(WDES%NB_TOT,WDES%NB_TOT))
@@ -1066,7 +1074,7 @@
             ! find the corresponding entry in KPOINTS_FULL_ORIG, that contains
             ! the set of k-points used in the computation of the rotation matrices
             DO NKP=1,KPOINTS_FULL_ORIG%NKPTS
-               IF (LIDENTICAL_KPOINT(KPOINTS_FULL%VKPT(:,NK),KPOINTS_FULL_ORIG%VKPT(:,NKP))) exit 
+               IF (LIDENTICAL_KPOINT(KPOINTS_FULL%VKPT(:,NK),KPOINTS_FULL_ORIG%VKPT(:,NKP))) exit
             ENDDO
             IF (NKP>KPOINTS_FULL_ORIG%NKPTS) THEN
                WRITE(*,*) 'MLWF_ROTATE_ORBITALS_FULLK: ERROR: no matching k-point found in KPOINTS_FULL_ORIG',NK
@@ -1116,10 +1124,10 @@
 
       RETURN
       END SUBROUTINE MLWF_ROTATE_ORBITALS_FULLK
- 
+
 
 !******************** SUBROUTINE MLWF_ROTATE_ORBITALS_NOSYMM ***********
-! 
+!
 !***********************************************************************
       SUBROUTINE MLWF_ROTATE_ORBITALS_NOSYMM(WDES,W)
       USE dfast
@@ -1135,7 +1143,7 @@
       INTEGER ISP,NK,NKP,NW,NB,NBEXCL,NBwin
       COMPLEX(q) CTMP
       GDEF, ALLOCATABLE :: U(:,:)
- 
+
       CALL CHECK_FULL_KPOINTS
 
       IF ((.NOT.ALLOCATED(U_matrix)).OR.(.NOT.ALLOCATED(U_matrix_opt))) THEN
@@ -1156,7 +1164,7 @@
       ENDDO
       IF ((NB+NBEXCL)/=WDES%NB_TOT) THEN
          WRITE(*,*) 'MLWF_ROTATE_ORBITALS_NOSYMM: ERROR: inconsistent number of bands:', &
-        &   NB+NBEXCL,WDES%NB_TOT 
+        &   NB+NBEXCL,WDES%NB_TOT
       ENDIF
 
       ALLOCATE(U(WDES%NB_TOT,WDES%NB_TOT))
@@ -1169,7 +1177,7 @@
             ! find the corresponding entry in KPOINTS_FULL, that contains
             ! the set of k-points used in the computation of the rotation matrices
             DO NKP=1,KPOINTS_FULL%NKPTS
-               IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit 
+               IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit
             ENDDO
             IF (NKP>KPOINTS_FULL%NKPTS) THEN
                WRITE(*,*) 'MLWF_ROTATE_ORBITALS: ERROR: no matching k-point found in KPOINTS_FULL',NK
@@ -1294,7 +1302,7 @@
       INTEGER ISP,IK,NK,IB,ISPINOR,IBG
       INTEGER IDIR,J,IDELTA,IORDER,ISGN
       REAL(q) K0(3),K(3),DK(3),KP(3)
-      COMPLEX(q), ALLOCATABLE :: CPHASE(:) 
+      COMPLEX(q), ALLOCATABLE :: CPHASE(:)
       LOGICAL LPHASE
 
       IORDER=4
@@ -1332,7 +1340,7 @@
                IF(IBG>MLWF_num_wann) EXIT
 #endif
 
-               CALL W1_COPY(ELEMENT(W,WDESK,IB,ISP),WK) 
+               CALL W1_COPY(ELEMENT(W,WDESK,IB,ISP),WK)
                CALL FFTWAV_W1(WK)
 
                IF (LPHASE) CALL APPLY_PHASE(WDESK%GRID,CPHASE,WK%CR,WK%CR)
@@ -1356,7 +1364,7 @@
          ENDDO dir
 
       ENDDO kpoint
-      ENDDO spin 
+      ENDDO spin
 
       RETURN
       END SUBROUTINE MLWF_DPSI_DK
@@ -1368,11 +1376,11 @@
 ! YLM(:,1)     -> s
 ! YLM(:,2:4)   -> p:= y, z, x
 ! YLM(:,5:9)   -> d:= xy, yz, z2, xz, x2
-! YLM(:,10:16) -> f:= y(3x2-y2), xyz, yz2, z3, xz2, z(x2-y2), x(x2-3y2)           
+! YLM(:,10:16) -> f:= y(3x2-y2), xyz, yz2, z3, xz2, z(x2-y2), x(x2-3y2)
 !
 ! This routine provides a translation between the aforementioned and
 ! the orbital definitions used in wannier90
-! 
+!
 !***********************************************************************
       SUBROUTINE WANNIER90_ORBITAL_DEFINITIONS( &
      &   L,M,HYBRID_ORBITAL &
@@ -1381,16 +1389,16 @@
       INTEGER L,M
       REAL(q) HYBRID_ORBITAL(:)
       ! local variables
-      
+
       ! we should be able to deal with anything up to and including L=3
       IF (SIZE(HYBRID_ORBITAL)<16) THEN
          WRITE(*,*) 'WANNIER90_ORBITAL_DEFINITIONS: ERROR: HYBRID_ORBITAL array too small', &
         &   SIZE(HYBRID_ORBITAL)
          STOP
       ENDIF
-      
+
       HYBRID_ORBITAL=0
-      
+
       SELECT CASE(L)
          CASE(0)
             ! s-function
@@ -1578,15 +1586,15 @@
             WRITE(*,'(A,I2,A,I2,A)')  &
            &   'WANNIER90_ORBITAL_DEFINITIONS: ERROR: L=',L,' M=',M,' not implemented'
             STOP
-         
+
       END SELECT
-      
+
       RETURN
       END SUBROUTINE WANNIER90_ORBITAL_DEFINITIONS
 
 
 !******************** SUBROUTINE SETROTYLM *****************************
-!           
+!
 !***********************************************************************
       SUBROUTINE SETROTYLM( &
      & XIN,ZIN,LMAX,ROTYLM &
@@ -1610,7 +1618,7 @@
       REAL(q), ALLOCATABLE :: YLM(:,:),YLMP(:,:)
       REAL(q), ALLOCATABLE :: WEIGHT(:),ABSCIS(:)
       EXTERNAL GAUSSI2
-      
+
       X=XIN; Z=ZIN
 
       LMMAX=(LMAX+1)**2
@@ -1633,7 +1641,7 @@
       XDOTZ=X(1)*Z(1)+X(2)*Z(2)+X(3)*Z(3)
       IF (ABS(XDOTZ)>TINY) THEN
          WRITE(*,*) 'SETROTYLM: ERROR: X and Z are not orthogonal (enough):',ABS(XDOTZ)
-         STOP         
+         STOP
       ENDIF
       ! y=Z \times X
       Y(1)=(Z(2)*X(3)-X(2)*Z(3))
@@ -1646,13 +1654,13 @@
 !     WRITE(*,'(3F10.5)') U(1,:)
 !     WRITE(*,'(3F10.5)') U(2,:)
 !     WRITE(*,'(3F10.5)') U(3,:)
-! test      
+! test
       SCALE=2*SQRT(PI) ! 1/Y00
 
 !========================================================================
 ! number of theta and phi pivot points to perform angular integration
-! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically 
-! needed to integrate Yllmax,m. 
+! since Exc=f(a*Yllmax,m) we need more pivot points than theoretically
+! needed to integrate Yllmax,m.
 ! the factor 2 is the minium, 3 is more accurate
 !========================================================================
       PHPTS=3*(LMAX+1)
@@ -1660,9 +1668,9 @@
       NPTS=PHPTS*THPTS
       DELTAPHI=REAL(2_q*PI/PHPTS,KIND=q)
       ! allocate arrays
-      ALLOCATE(XYZPTS(NPTS,3),UXYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), & 
+      ALLOCATE(XYZPTS(NPTS,3),UXYZPTS(NPTS,3),RADPTS(NPTS,2),WEIGHT(THPTS),ABSCIS(THPTS), &
      &     YLM(NPTS,LMMAX),YLMP(NPTS,LMMAX))
-      
+
       ! set phi positions, equally spaced
       RADPTS=0; WEIGHT=0; ABSCIS=0
       DO I=1,PHPTS
@@ -1689,9 +1697,9 @@
       DO I=1,NPTS
          UXYZPTS(I,1)=U(1,1)*XYZPTS(I,1)+U(1,2)*XYZPTS(I,2)+U(1,3)*XYZPTS(I,3)
          UXYZPTS(I,2)=U(2,1)*XYZPTS(I,1)+U(2,2)*XYZPTS(I,2)+U(2,3)*XYZPTS(I,3)
-         UXYZPTS(I,3)=U(3,1)*XYZPTS(I,1)+U(3,2)*XYZPTS(I,2)+U(3,3)*XYZPTS(I,3)         
+         UXYZPTS(I,3)=U(3,1)*XYZPTS(I,1)+U(3,2)*XYZPTS(I,2)+U(3,3)*XYZPTS(I,3)
       ENDDO
-      
+
       YLMP=0
       CALL SETYLM(LMAX,NPTS,YLMP,UXYZPTS(:,1),UXYZPTS(:,2),UXYZPTS(:,3))
 
@@ -1707,7 +1715,7 @@
             ROTYLM(LMP,LM)=ROTYLM(LMP,LM)+YLMP(NP,LMP)*YLM(NP,LM)*SIM_FAKT
          ENDDO
          ENDDO
-         
+
       ENDDO points
 
       DEALLOCATE(XYZPTS,UXYZPTS,RADPTS,WEIGHT,ABSCIS,YLM,YLMP)
@@ -1716,7 +1724,7 @@
 
 
 !******************** SUBROUTINE SETRGRID ******************************
-!      
+!
 !***********************************************************************
       SUBROUTINE SETRGRID( &
      & RSTART,REND,H,R &
@@ -1727,9 +1735,9 @@
       REAL(q) RSTART,REND,H
       ! local variables
       INTEGER I
-      
+
       I=0
-      DO 
+      DO
         I=I+1
         IF (RSTART*EXP(H*(I-1))>=REND) EXIT
       ENDDO
@@ -1743,7 +1751,7 @@
       ALLOCATE(R%R(I))
       DO I=1,R%NMAX
          R%R(I)=R%RSTART*EXP(H*(I-1))
-      ENDDO      
+      ENDDO
       R%REND=R%R(R%NMAX)
 
       IF (ASSOCIATED(R%SI)) THEN
@@ -1756,7 +1764,7 @@
 
 
 !******************** SUBROUTINE RADIAL_FUNCTION ***********************
-!      
+!
 !***********************************************************************
       SUBROUTINE RADIAL_FUNCTION( &
      & ITYP,R,ZA,FR &
@@ -1770,7 +1778,7 @@
 
       IF (SIZE(FR)<R%NMAX) THEN
          WRITE(*,*) 'RADIAL_FUNCTION: ERROR: FR too small:',SIZE(FR),R%NMAX
-      ENDIF      
+      ENDIF
       IF (ITYP==1) THEN
          FR(:)=2._q*ZA**(3._q/2._q)*EXP(-ZA*R%R(:))
       ELSEIF (ITYP==2) THEN
@@ -1781,13 +1789,13 @@
       ELSE
          WRITE(*,*) 'RADIAL_FUNCTION: TYPE does not exist',ITYP
       ENDIF
-      
+
       RETURN
       END SUBROUTINE RADIAL_FUNCTION
 
 
 !******************** SUBROUTINE CALC_OVERLAP_GN ***********************
-!      
+!
 !***********************************************************************
       SUBROUTINE CALC_OVERLAP_GN( &
      &   L,FG,POS,W,K,ISP,ISPINOR,P,CQIJ,LATT_CUR,T_INFO,S &
@@ -1811,25 +1819,25 @@
       REAL(q) FG(:,:,:)
       REAL(q) POS(3)
       OVERLAP CQIJ(:,:,:,:)
-      GDEF S(W%WDES%NB_TOT,(L+1)**2)      
+      GDEF S(W%WDES%NB_TOT,(L+1)**2)
       ! local variables
       TYPE(wavespin) WP
       TYPE(wavefuna) WK,WRYlm
       TYPE(wavedes1), TARGET :: WDESK
       TYPE(nonl_struct) NONL_S
-            
+
       TYPE(rotation_handle), POINTER :: ROT_HANDLE
 
       GDEF C
       REAL(q) WSCAL
       INTEGER NK,NB,N,NYLM
-      
+
       WP=W
       WP%WDES=>WDES_FULL_PEAD
-            
+
       CALL CHECK_FULL_KPOINTS
 
-      NULLIFY(ROT_HANDLE)      
+      NULLIFY(ROT_HANDLE)
 
       NYLM=(L+1)**2
 
@@ -1847,7 +1855,7 @@
 
       CALL NONL_ALLOC(NONL_S,T_INFO,P,WP%WDES,.FALSE.)
       CALL SPHER(WP%WDES%GRID,NONL_S,P,WP%WDES,LATT_CUR,1,NK)
-      CALL PHASE(WP%WDES,NONL_S,NK)      
+      CALL PHASE(WP%WDES,NONL_S,NK)
 
       CALL NEWWAVA(WRYlm,WDESK,NYLM)
       WRYlm%CW=0
@@ -1858,7 +1866,7 @@
       ENDDO
 
       ! calculate overlap between Wk and WRYlm: < w_{m,k1} | S | RYlm >
-      S=0    
+      S=0
       DO NB=1,WP%WDES%NBANDS
          DO N=1,NYLM
             C=W1_DOT(ELEMENT(WK,NB),ELEMENT(WRYlm,N),CQIJ)
@@ -1868,21 +1876,21 @@
       ENDDO
 
       CALLMPI( M_sum_g(WDESK%COMM_INTER,S(1,1),WDESK%NB_TOT*NYLM) )
-      
-      ! some deallocation to be done      
+
+      ! some deallocation to be done
       CALL DEALLOCATE_ROT_HANDLE(ROT_HANDLE)
 
       CALL DELWAVA(WRYlm)
-      IF (NK/=KPOINTS_FULL%NEQUIV(NK)) CALL DELWAVA(WK)      
+      IF (NK/=KPOINTS_FULL%NEQUIV(NK)) CALL DELWAVA(WK)
 
       CALL NONL_DEALLOC(NONL_S)
-            
+
       RETURN
       END SUBROUTINE CALC_OVERLAP_GN
 
 
 !******************** SUBROUTINE CONSTRUCT_FUNCTION_RYlm ***************
-!      
+!
 !***********************************************************************
       SUBROUTINE CONSTRUCT_FUNCTION_RYlm( &
      &   LMAX,F,LATT_CUR,POS,NONL_S,ISPINOR,WRYLM &
@@ -1913,7 +1921,7 @@
 
       LMMAX=(LMAX+1)**2
 
-      NPL=WRYLM%WDES1%NGVECTOR      
+      NPL=WRYLM%WDES1%NGVECTOR
 
       IF (ISPINOR/=1.AND.(.NOT.WRYLM%WDES1%LNONCOLLINEAR)) THEN
          WRITE(*,*) 'CONSTRUCT_FUNCTION_RYlm: ERROR: ISPINOR=',ISPINOR,' but LNONCOLLINEAR=.FALSE.'
@@ -1926,7 +1934,7 @@
       ! loop over all G-vectors in the basis at this k-point
       DO IND=1,WRYLM%WDES1%NGVECTOR
          N1=MOD(WRYLM%WDES1%IGX(IND)+WRYLM%WDES1%GRID%NGX,WRYLM%WDES1%GRID%NGX)+1
-         N2=MOD(WRYLM%WDES1%IGY(IND)+WRYLM%WDES1%GRID%NGY,WRYLM%WDES1%GRID%NGY)+1 
+         N2=MOD(WRYLM%WDES1%IGY(IND)+WRYLM%WDES1%GRID%NGY,WRYLM%WDES1%GRID%NGY)+1
          N3=MOD(WRYLM%WDES1%IGZ(IND)+WRYLM%WDES1%GRID%NGZ,WRYLM%WDES1%GRID%NGZ)+1
 
          G1=(WRYLM%WDES1%GRID%LPCTX(N1)+WRYLM%WDES1%VKPT(1))
@@ -1985,13 +1993,13 @@
       ENDDO
 
       DEALLOCATE(G,FG,XS,YS,ZS,CFAKTX,YLM)
-      
+
       RETURN
       END SUBROUTINE CONSTRUCT_FUNCTION_RYlm
 
 
 !******************** SUBROUTINE WRITE_WAVE_FUNCTIONS ******************
-!      
+!
 !***********************************************************************
       SUBROUTINE WRITE_WAVE_FUNCTIONS(W,K,ISP,EXCLUDE_BAND,P,LATT_CUR,IU)
       USE pead
@@ -2005,7 +2013,7 @@
       TYPE(latt) LATT_CUR
       INTEGER ISP,IU
       REAL(q) K(3)
-      LOGICAL EXCLUDE_BAND(W%WDES%NB_TOT) 
+      LOGICAL EXCLUDE_BAND(W%WDES%NB_TOT)
      ! local variables
       TYPE(wavespin) WP
       TYPE(wavefuna) WK
@@ -2049,7 +2057,7 @@
 
       ALLOCATE(WVFN(NGX*NGY*NGZ))
 
-      NWRITTEN=0 
+      NWRITTEN=0
 
       DO NB=1,WDESK%NBANDS,NSTRIP
          DO ISTRIP=NB,MIN(WDESK%NBANDS,NB+NSTRIP-1)
@@ -2098,7 +2106,7 @@
 
             ! write WVFN to file
 #ifdef MPI
-            IF (WP%WDES%COMM%NODE_ME==WP%WDES%COMM%IONODE) THEN 
+            IF (WP%WDES%COMM%NODE_ME==WP%WDES%COMM%IONODE) THEN
 #endif
                WRITE(IU) (WVFN(I),I=1,NGX*NGY*NGZ)
 #ifdef MPI
@@ -2108,7 +2116,7 @@
          ENDDO
       ENDDO
 
-      ! some deallocation to be done      
+      ! some deallocation to be done
       CALL DEALLOCATE_ROT_HANDLE(ROT_HANDLE)
       IF (NK/=KPOINTS_FULL%NEQUIV(NK)) CALL DELWAVA(WK)
       DO NB=1,NSTRIP*WP%WDES%NB_PAR
@@ -2122,7 +2130,7 @@
 
 
 !******************** SUBROUTINE OCCURS_IN_FILE ************************
-!      
+!
 !***********************************************************************
       SUBROUTINE OCCURS_IN_FILE(IUNIT,PATTERN,N)
       IMPLICIT NONE
@@ -2139,14 +2147,14 @@
       WRITE(PATT,'(A20)') PATTERN
       CALL STRIP(PATT,NN,'L')
       CALL UPPER(PATT)
-     
-      N=0 
+
+      N=0
       DO
          READ(IUNIT,'(A)',ERR=100,END=100) BUFLIN
          CALL UPPER(BUFLIN)
-         N=N+NOCCUR(BUFLIN,PATT,-1) 
-      ENDDO 
-    
+         N=N+NOCCUR(BUFLIN,PATT,-1)
+      ENDDO
+
  100  CONTINUE
       BACKSPACE(IUNIT)
       RETURN
@@ -2154,7 +2162,7 @@
 
 
 !******************** SUBROUTINE COPYFILE ******************************
-!      
+!
 !***********************************************************************
       SUBROUTINE COPYFILE(SRC,TRG)
       IMPLICIT NONE
@@ -2305,7 +2313,7 @@
         ENDDO
         IF ((NB+NBEXCL)/=WDES%NB_TOT) THEN
            WRITE(*,*) 'MLWF_GET_ROTATION_MATRICES: ERROR: inconsistent number of bands:', &
-                &   NB+NBEXCL,WDES%NB_TOT 
+                &   NB+NBEXCL,WDES%NB_TOT
         ENDIF
 
         ALLOCATE(U(WDES%NB_TOT,WDES%NB_TOT,WDES%NKPTS,WDES%ISPIN))
@@ -2316,7 +2324,7 @@
               ! the set of k-points used in the computation of the rotation matrices
 
               DO NKP=1,KPOINTS_FULL%NKPTS
-                 IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit 
+                 IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit
               ENDDO
               IF (NKP>KPOINTS_FULL%NKPTS) THEN
                  WRITE(*,*) 'MLWF_GET_ROTATION_MATRICES: ERROR: no matching k-point found in KPOINTS_FULL',NK,WDES%VKPT(:,NK)
@@ -2351,15 +2359,15 @@
         ! < w_m |H| w_n > =: H
         ! w_m = U_jm b_j
         ! eps = eps_j delta_ij
-        ! 
+        !
         ! therefore:
         ! H_mn = U*_jm U_in < b_j|H|b_i > = U*_jm U_in eps_j delta_ji = U*_jm U_jn eps_j
         HAM=0
         spin1: DO ISP=1,W%WDES%ISPIN
            kpoint1: DO IK=1,WDES%NKPTS
-              
+
               DO B1=1,W%WDES%NB_TOTK(IK,ISP)
-                 DO B2=1,W%WDES%NB_TOTK(IK,ISP) 
+                 DO B2=1,W%WDES%NB_TOTK(IK,ISP)
                     DO IB=1,W%WDES%NB_TOTK(IK,ISP)
                        HAM(B2,B1,IK,ISP)=HAM(B2,B1,IK,ISP)+GCONJG(U(IB,B2,IK,ISP))*W%CELTOT(IB,IK,ISP)*U(IB,B1,IK,ISP)
                     END DO
@@ -2395,19 +2403,19 @@
         INTEGER ISP,IK,NK,IB,ISPINOR,B1,B2
         INTEGER IDIR,J,IDELTA,IORDER,ISGN
         REAL(q) K0(3),K(3),DK(3),KP(3)
-       
+
         ! calculate derivative of Hamiltonian at each k-point
         IORDER=4
 
         DK(1)=1._q/REAL(KPOINTS_FULL%NKPX,KIND=q)
         DK(2)=1._q/REAL(KPOINTS_FULL%NKPY,KIND=q)
         DK(3)=1._q/REAL(KPOINTS_FULL%NKPZ,KIND=q)
-        
+
         DHAM=0
-        
+
         spin2: DO ISP=1,W%WDES%ISPIN
            kpoint2: DO IK=1,KPOINTS%NKPTS
-              
+
               K0(:)=KPOINTS%VKPT(:,IK)
 
               dir: DO IDIR=1,3
@@ -2417,24 +2425,24 @@
                        K(IDIR)=K0(IDIR)+ISGN*IDELTA*DK(IDIR)
                        NK=KPOINT_IN_FULL_GRID(K,KPOINTS_FULL)
                        KP(:)=KPOINTS_FULL%VKPT(:,NK)
- 
+
                        ! non-cartesian coordinates !!!
-                       DHAM(:,:,IK,ISP,IDIR)=DHAM(:,:,IK,ISP,IDIR)+CMPLX(ISGN*HAM(:,:,NK,ISP)*FAC(IDELTA,IORDER)/DK(IDIR)/TPI/2._q,KIND=q)                      
+                       DHAM(:,:,IK,ISP,IDIR)=DHAM(:,:,IK,ISP,IDIR)+CMPLX(ISGN*HAM(:,:,NK,ISP)*FAC(IDELTA,IORDER)/DK(IDIR)/TPI/2._q,KIND=q)
                        DO J=1,3
 !                          DHAM(:,:,IK,ISP,J)=DHAM(:,:,IK,ISP,J)+CMPLX(ISGN*LATT_CUR%A(J,IDIR)*HAM(:,:,NK,ISP)*FAC(IDELTA,IORDER)/DK(IDIR)/TPI/2._q,KIND=q)
                           ! derivative w.r.t. to dimensionless coordinate
 !                          DHAM(:,:,IK,ISP,J)=DHAM(:,:,IK,ISP,J)+CMPLX(ISGN*HAM(:,:,NK,ISP)*FAC(IDELTA,IORDER)/DK(IDIR)/TPI/2._q,KIND=q)
-                          
+
 
                        ENDDO
 
                     ENDDO sgn
                  ENDDO delta
               ENDDO dir
-              
+
            ENDDO kpoint2
         ENDDO spin2
-        
+
         RETURN
       END SUBROUTINE MLWF_DHAM_DK
 
@@ -2471,7 +2479,7 @@
         ENDDO
         IF ((NB+NBEXCL)/=WDES%NB_TOT) THEN
            WRITE(*,*) 'MLWF_GET_ROTATION_MATRICES: ERROR: inconsistent number of bands:', &
-                &   NB+NBEXCL,WDES%NB_TOT 
+                &   NB+NBEXCL,WDES%NB_TOT
         ENDIF
 
         spin: DO ISP=1,WDES%ISPIN
@@ -2480,7 +2488,7 @@
               ! the set of k-points used in the computation of the rotation matrices
 
               DO NKP=1,KPOINTS_FULL%NKPTS
-                 IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit 
+                 IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),KPOINTS_FULL%VKPT(:,NKP))) exit
               ENDDO
               IF (NKP>KPOINTS_FULL%NKPTS) THEN
                  WRITE(*,*) 'MLWF_GET_ROTATION_MATRICES: ERROR: no matching k-point found in KPOINTS_FULL',NK,WDES%VKPT(:,NK)
@@ -2526,15 +2534,15 @@
         ! < w_m |H| w_n > =: H
         ! w_m = U_jm b_j
         ! eps = eps_j delta_ij
-        ! 
+        !
         ! therefore:
         ! H_mn = U*_jm U_in < b_j|H|b_i > = U*_jm U_in eps_j delta_ji = U*_jm U_jn eps_j
         HAM=0
         spin1: DO ISP=1,W%WDES%ISPIN
            kpoint1: DO IK=1,WDES%NKPTS
-              
+
               DO B1=1,W%WDES%NB_TOTK(IK,ISP)
-                 DO B2=1,W%WDES%NB_TOTK(IK,ISP) 
+                 DO B2=1,W%WDES%NB_TOTK(IK,ISP)
                     DO IB=1,W%WDES%NB_TOTK(IK,ISP)
                        HAM(B2,B1,IK,ISP)=HAM(B2,B1,IK,ISP)+GCONJG(U(IB,B2,IK,ISP))*W%CELTOT(IB,IK,ISP)*U(IB,B1,IK,ISP)
                     END DO
@@ -2550,7 +2558,7 @@
 !***********************************************************************
 
       SUBROUTINE WRITE_WANPROJ_FILE(WDES)
-         IMPLICIT NONE 
+         IMPLICIT NONE
          TYPE(wavedes) WDES
          COMPLEX(q), ALLOCATABLE :: U(:,:)
          INTEGER I,J,K,IP,IPP
@@ -2571,8 +2579,8 @@
          U=0
 
          OPEN(UNIT=99, FILE=WANPROJFILE, STATUS='REPLACE')
-            
-         WRITE(99,*)WDES%ISPIN,WDES%NKPTS,WDES%NB_TOT,NW  
+
+         WRITE(99,*)WDES%ISPIN,WDES%NKPTS,WDES%NB_TOT,NW
          DO NK=1,WDES%NKPTS
             WRITE(99,999)NK,WDES%VKPT(:,NK)
          ENDDO
@@ -2581,7 +2589,7 @@
                ! find the corresponding entry in kpt_latt, that contains
                ! the set of k-points used in the computation of the rotation matrices
                DO NKP=1,SIZE(kpt_latt,2)
-                  IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),kpt_latt(:,NKP))) exit 
+                  IF (LIDENTICAL_KPOINT(WDES%VKPT(:,NK),kpt_latt(:,NKP))) exit
                ENDDO
                IF (NKP>KPOINTS_FULL%NKPTS) THEN
                   WRITE(*,*) &
@@ -2632,4 +2640,3 @@
 1001     FORMAT(2I6,2F26.16)
       ENDSUBROUTINE WRITE_WANPROJ_FILE
       END MODULE mlwf
-
